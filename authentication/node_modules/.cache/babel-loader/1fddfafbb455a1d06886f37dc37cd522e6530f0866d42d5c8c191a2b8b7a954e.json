{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Login Form\\\\authentication\\\\src\\\\Reset.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResetPassword({\n  onLogin\n}) {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [msg, setMsg] = useState(\"\");\n  const [msgClass, setMsgClass] = useState(\"\");\n  const handleReset = async e => {\n    e.preventDefault();\n    try {\n      const res = await fetch(\"http://localhost:5000/reset-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: email.trim(),\n          newPassword\n        })\n      });\n\n      // Check if response is ok (status 200-299)\n      if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\n      const data = await res.json(); // parse JSON only if status is ok\n      setMsg(data.message);\n      setMsgClass(data.success ? \"text-success\" : \"text-danger\");\n      if (data.success) setTimeout(onLogin, 1500);\n    } catch (err) {\n      console.error(err);\n      setMsg(\"Server error. Make sure backend is running.\");\n      setMsgClass(\"text-danger\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleReset,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-center mb-3\",\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      className: \"form-control mb-2\",\n      placeholder: \"Registered Email\",\n      value: email,\n      onChange: e => setEmail(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      className: \"form-control mb-2\",\n      placeholder: \"New Password\",\n      value: newPassword,\n      onChange: e => setNewPassword(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-warning w-100 mb-2\",\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), msg && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `text-center ${msgClass}`,\n      children: msg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(ResetPassword, \"X+72WxCyyPWrfnB+7G3gHDnFhp0=\");\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ResetPassword","onLogin","_s","email","setEmail","newPassword","setNewPassword","msg","setMsg","msgClass","setMsgClass","handleReset","e","preventDefault","res","fetch","method","headers","body","JSON","stringify","trim","ok","Error","status","data","json","message","success","setTimeout","err","console","error","onSubmit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/Login Form/authentication/src/Reset.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction ResetPassword({ onLogin }) {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [msgClass, setMsgClass] = useState(\"\");\r\nconst handleReset = async (e) => {\r\n  e.preventDefault();\r\n  try {\r\n    const res = await fetch(\"http://localhost:5000/reset-password\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email: email.trim(), newPassword }),\r\n    });\r\n\r\n    // Check if response is ok (status 200-299)\r\n    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\r\n\r\n    const data = await res.json(); // parse JSON only if status is ok\r\n    setMsg(data.message);\r\n    setMsgClass(data.success ? \"text-success\" : \"text-danger\");\r\n\r\n    if (data.success) setTimeout(onLogin, 1500);\r\n  } catch (err) {\r\n    console.error(err);\r\n    setMsg(\"Server error. Make sure backend is running.\");\r\n    setMsgClass(\"text-danger\");\r\n  }\r\n};\r\n\r\n\r\n  return (\r\n    <form onSubmit={handleReset}>\r\n      <h3 className=\"text-center mb-3\">Reset Password</h3>\r\n      <input type=\"email\" className=\"form-control mb-2\" placeholder=\"Registered Email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\r\n      <input type=\"password\" className=\"form-control mb-2\" placeholder=\"New Password\" value={newPassword} onChange={(e) => setNewPassword(e.target.value)} required />\r\n      <button className=\"btn btn-warning w-100 mb-2\">Reset Password</button>\r\n      {msg && <p className={`text-center ${msgClass}`}>{msg}</p>}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}